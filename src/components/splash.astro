---
import { Image } from "astro:assets";
import culturalGirlImage from "~/assets/cultural-girl.png";
import HeroImage from "~/components/hero-image.astro";

const widths = [450, 800];
const sizes = "(min-width: 640px) 42vw, 67vw";
---
<section class="relative h-full bg-black -z-20 overflow-hidden">
  <!-- Polygon background -->
  <div id="bg" class="absolute inset-0 -z-10"></div>

  <div id="splash-bg-fallback" class="absolute inset-0 hidden opacity-40">
    <HeroImage />
  </div>
  
  <div class="relative grid h-full place-items-center sm:grid-cols-2">
    <h2 class="flex flex-col items-center gap-2 self-end sm:gap-4 sm:self-auto sm:justify-self-end">
      <img src="src/assets/main-logo.png" class="size-20 text-white md:size-32" alt="Main KAHP Logo">
      <div class="text-center font-extrabold tracking-tighter text-6xl md:text-8xl text-white">
        KAHP
        <br /> Legado
        <br /> Africano
      </div>
    </h2>
    <div id="cultural-girl" class="w-2/3 max-w-3xl self-start sm:w-10/12 sm:self-auto sm:justify-self-start">
      <Image
        class="h-full w-full object-cover"
        src={culturalGirlImage}
        widths={widths}
        sizes={sizes}
        loading="eager"
        alt="A floating cultural girl in a space suit"
      />
    </div>
  </div>
</section>

<noscript>
  <style>
    #splash-bg-fallback {
      display: block;
    }
  </style>
</noscript>

<style>
  @keyframes float {
    0% {
      transform: translate3d(0, 0, 0);
    }
    100% {
      transform: translate3d(0, 30px, 0);
    }
  }

  #cultural-girl {
    animation: float linear 6.5s infinite alternate;
    margin-left: 13rem;
    margin-top: 2rem;
    width: 100%;
  }

  @media (prefers-reduced-motion: reduce) {
    #astronaut {
      animation: none;
    }
    #splash-bg-fallback {
      display: block;
    }
  }

  /* Style for the polygon background */
  #bg {
    background-color: transparent;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: -1; /* Ensure it stays behind the other elements */
  }
</style>

<script>
      var refreshDuration = 10000;
      var refreshTimeout: any;
      var numPointsX: any;
      var numPointsY: any;
      var unitWidth: any;
      var unitHeight: any;
      var points: any;
      
      function onLoad()
      {
          var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
          svg.setAttribute('width', window.outerWidth.toString());
          svg.setAttribute('height', window.outerHeight.toString());
          document.querySelector('#bg')?.appendChild(svg);
      
          var unitSize = (window.innerWidth+window.innerHeight)/15;
          numPointsX = Math.ceil(window.innerWidth/unitSize)+1;
          numPointsY = Math.ceil(window.innerHeight/unitSize)+1;
          unitWidth = Math.ceil(window.innerWidth/(numPointsX-1));
          unitHeight = Math.ceil(window.innerHeight/(numPointsY-1));
      
          points = [];
      
          for(var y = 0; y < numPointsY; y++) {
              for(var x = 0; x < numPointsX; x++) {
                  points.push({x:unitWidth*x, y:unitHeight*y, originX:unitWidth*x, originY:unitHeight*y});
              }
          }
      
          randomize();
      
          for(var i = 0; i < points.length; i++) {
              if(points[i].originX != unitWidth*(numPointsX-1) && points[i].originY != unitHeight*(numPointsY-1)) {
                  var topLeftX = points[i].x;
                  var topLeftY = points[i].y;
                  var topRightX = points[i+1].x;
                  var topRightY = points[i+1].y;
                  var bottomLeftX = points[i+numPointsX].x;
                  var bottomLeftY = points[i+numPointsX].y;
                  var bottomRightX = points[i+numPointsX+1].x;
                  var bottomRightY = points[i+numPointsX+1].y;
      
                  var rando = Math.floor(Math.random()*2);
      
                  for(var n = 0; n < 2; n++) {
                      var polygon: any = document.createElementNS(svg.namespaceURI, 'polygon');
      
                      if(rando==0) {
                          if(n==0) {
                              polygon.point1 = i;
                              polygon.point2 = i+numPointsX;
                              polygon.point3 = i+numPointsX+1;
                              polygon.setAttribute('points',topLeftX+','+topLeftY+' '+bottomLeftX+','+bottomLeftY+' '+bottomRightX+','+bottomRightY);
                          } else if(n==1) {
                              polygon.point1 = i;
                              polygon.point2 = i+1;
                              polygon.point3 = i+numPointsX+1;
                              polygon.setAttribute('points',topLeftX+','+topLeftY+' '+topRightX+','+topRightY+' '+bottomRightX+','+bottomRightY);
                          }
                      } else if(rando==1) {
                          if(n==0) {
                              polygon.point1 = i;
                              polygon.point2 = i+numPointsX;
                              polygon.point3 = i+1;
                              polygon.setAttribute('points',topLeftX+','+topLeftY+' '+bottomLeftX+','+bottomLeftY+' '+topRightX+','+topRightY);
                          } else if(n==1) {
                              polygon.point1 = i+numPointsX;
                              polygon.point2 = i+1;
                              polygon.point3 = i+numPointsX+1;
                              polygon.setAttribute('points',bottomLeftX+','+bottomLeftY+' '+topRightX+','+topRightY+' '+bottomRightX+','+bottomRightY);
                          }
                      }
                      polygon.setAttribute('fill','rgb(255,152,10,'+(Math.random()/3)+')');
                      var animate = document.createElementNS('http://www.w3.org/2000/svg','animate');
                      animate.setAttribute('fill','freeze');
                      animate.setAttribute('attributeName','points');
                      animate.setAttribute('dur',refreshDuration+'ms');
                      animate.setAttribute('calcMode','linear');
                      polygon.appendChild(animate);
                      svg.appendChild(polygon);
                  }
              }
          }
      
          refresh();
      
      }
      
      function randomize() {
          for(var i = 0; i < points.length; i++) {
              if(points[i].originX != 0 && points[i].originX != unitWidth*(numPointsX-1)) {
                  points[i].x = points[i].originX + Math.random()*unitWidth-unitWidth/2;
              }
              if(points[i].originY != 0 && points[i].originY != unitHeight*(numPointsY-1)) {
                  points[i].y = points[i].originY + Math.random()*unitHeight-unitHeight/2;
              }
          }
      }
      
      function refresh() {
          randomize();
          for(var i = 0; i < document.querySelector('#bg svg')!.childNodes.length; i++) {
              var polygon: any = document.querySelector('#bg svg')?.childNodes[i];
              var animate = polygon!.childNodes[0];
              if(animate.getAttribute('to')) {
                  animate.setAttribute('from',animate.getAttribute('to'));
              }
              animate.setAttribute('to',points[polygon.point1].x+','+points[polygon.point1].y+' '+points[polygon.point2].x+','+points[polygon.point2].y+' '+points[polygon.point3].x+','+points[polygon.point3].y);
              animate.beginElement();
          }
          refreshTimeout = setTimeout(function() {refresh();}, refreshDuration);
      }
      
      function onResize() {
          document.querySelector('#bg svg')?.remove();
          clearTimeout(refreshTimeout);
          onLoad();
      }
      
      window.onload = onLoad;
</script>